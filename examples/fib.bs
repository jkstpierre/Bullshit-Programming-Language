// Fibonacci Sequence in Bull$hit!
// Author: Joseph St. Pierre
// Year: 2018

//	PROGRAM DETAILS:
//		Takes a decimal number as input specifying the number of fibonacci numbers
//		to print. Outputs a space delimited list of the corresponding size containing
//		the requested fibonacci numbers in decimal format

####	// Create a 4x4 memory matrix

// Get number of fibonacci numbers to print from user
>v		// Move to cell 1 1
;		// Read decimal number

// Setup subtraction register
<		// Shift to 1 0
+		// Pick up 1 0
1		// Set curr value to 1
-		// Set 1 0 to 1

// Initialize first fibonacci number
+		// Copy 1 0 to current
^>		// Move to 0 1
-		// Set 0 1 to 1

// Create Space register (ascii 32) so output can be 'space' delimited

// Set up temporary registers for addition
>>	// Move to cell 0 3
+	// Copy cell 0 3 to curr
1	// Set curr to 1
-	// Store 1 in cell 0 3
+	// Pick up cell 0 3 (contains 1)
v	// Move to cell 1 3
-	// Store 1 in cell 1 3
+	// Pick up 1 from cell 1 3
v	// Move to cell 2 3
-	// Store 1 in cell 2 3
+	// Pick up cell 2 3
v	// Move to cell 3 3
-	// Store 1 in cell 3 3
^^^	// Move back to cell 0 3

// In Bull$hit!, traversal accross the memory matrix wraps around so we can use that to our advantage here
+	// Pick up cell 0 3 and store in curr (curr is 1)
vvvv	// Add 4 to curr and move to cell 0 3 because of wrap around (curr is 5)
vvvv	// Curr is 9
vvvv	// Curr is 13
vvvv	// Curr is 17
vvvv	// Curr is 21
vvvv	// Curr is 25
vvvv	// Curr is 29
vvv		// Curr is 32 but we are currently over cell 3 3
-		// Set cell 3 3 to 32

// Reset cells 0 3 -> 2 3 to 0
^	// Move to cell 2 3
+	// Pick up cell 2 3
0	// Set curr to 0
-	// Set cell 2 3 to 0
^	// Move to cell 1 3
+	// Pick up cell 1 3
0	// Set cell 1 3 to 0
-	// Store 0 in cell 1 3
^	// Move to cell 0 3
+	// Pick up cell 0 3
0	// Set curr to 0
-	// Set cell 0 3 to 0
^	// Move to cell 3 3
+	// Pick up cell 3 3 (contains 32)
v	// Move to cell 0 3
-	// Store 32 in cell 0 3
^	// Move to cell 3 3
+	// Pick up cell 3 3
0	// Set curr to 0
-	// Set cell 3 3 to 0
v	// Move to cell 0 3

// Move to start register
<<	// Move to cell 0 1
v	// Move to cell 1 1

// Begin program loop
{
	// Print Current Fibonacci Number
	^	// Move to cell 0 1
	:	// Print decimal number
	
	// Print Space
	>>	// Move to cell 0 3
	.	// Print ascii
	<<	// Move to cell 0 1
	
	// Generate Next Fibonacci Number
	<	// Move to cell 0 0
	+	// Copy cell 0 0 to curr value
	>	// Add cell 0 1 to curr value
	>	// Move to cell 0 2
	-	// Store sum in cell 0 2
	
	// Shift Fibonacci Registers to the Left
	<<	// Move to cell 0 0
	+	// Copy cell 0 0 to curr
	0	// Set curr to 0
	-	// Store 0 in cell 0 0
	>	// Move to cell 0 1
	+	// Copy cell 0 1 to curr
	<	// Move to cell 0 0
	-	// Store cell 0 1 in cell 0 0
	>	// Move to cell 0 1
	+	// Copy cell 0 1 to curr
	0	// Set curr to 0
	-	// Set cell 0 1 to 0
	>	// Move to cell 0 2
	+	// Copy cell 0 2 to curr
	<	// Move to cell 0 1
	-	// Set cell 0 1 to cell 0 2
	>	// Move to cell 0 2
	+	// Copy cell 0 2 to curr
	0	// Set curr to 0
	-	// Set cell 0 2 to 0
	<	// Move back to cell 0 1
	
	// Decrement iterator
	v	// Move to cell 1 1
	+	// Copy cell 1 1	
	<	// Subtract cell 1 0 from curr
	v	// Move to 2 0
	>	// Move to 2 1
	-	// Set 2 1 to (1 1) - (1 0)
	^	// Move to 1 1
	+	// Copy 1 1 to curr
	0	// Set curr to 0
	-	// Overwrite 1 1
	v	// Move to 2 1
	+	// Pick up 2 1
	^	// Move to 1 1
	-	// Update 1 1
	v	// Move to 2 1
	+	// Copy 2 1
	0	// Set to 0
	-	// Update 2 1
	^	// Move back to 1 1
}	// End program loop
